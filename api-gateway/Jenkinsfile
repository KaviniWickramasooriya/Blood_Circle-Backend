// pipeline {
//     agent any
//     environment {
//         //DOCKER_CREDENTIALS = credentials('samin-docker')
//         IMAGE_NAME = 'Iresh_Eranga/apigateway_Blood_Circle'
//         BUILD_NUMBER = "${env.BUILD_NUMBER}"
//     }
//     stages {
//         stage('SCM Checkout') {
//             steps {
//                 retry(3) {
//                     git branch: 'main', url: 'https://github.com/IreshEranga/lood-circle-backend.git'
//                 }
//             }
//         }
//         stage('Build Docker Image') {
//             steps {
//                 bat "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
//             }
//         }
//         stage('Login to Docker Hub') {
//             steps {
//                 // withCredentials([string(credentialsId: 'samin-docker', variable: 'samindocker')]) {
//                 //     script {
//                 //         bat "docker login -u Iresh_Eranga -p %samindocker%"
//                 //     }
//                 // }

//                 withCredentials([string(credentialsId: 'test-dockerhubpassword', variable: 'test-dockerhubpass')]) {
//                     script {
//                         bat "docker login -u Iresh_Eranga -p %test-dockerhubpass%"
//                     }
// }
//                 }
//         }
//         stage('Push Image') {
//             steps {
//                 bat "docker push ${IMAGE_NAME}:${BUILD_NUMBER}"
//             }
//         }
//         stage('Deploy') {
//             steps {
//                 script {
//                     bat "docker pull ${IMAGE_NAME}:${BUILD_NUMBER}"
//                     bat "docker stop nodeapp-cuban || exit 0"
//                     bat "docker rm nodeapp-cuban || exit 0"
//                     bat "docker run -d --name nodeapp-cuban -p 3000:3000 ${IMAGE_NAME}:${BUILD_NUMBER}"
//                 }
//             }
//         }
//     }
//     post {
//         always {
//             bat 'docker logout'
//             cleanWs()
//         }
//         success {
//             script {
//                 echo 'Build and deployment successful!'
//             }
//         }
//         failure {
//             script {
//                 echo 'Build or deployment failed!'
//             }
//         }
//     }
// }



pipeline {
    agent any
    environment {
        IMAGE_NAME = 'it22296696/apigateway_blood_circle' // Updated to lowercase
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
    }
    stages {
        // stage('SCM Checkout') {
        //     steps {
        //         retry(3) {
        //             git branch: 'main', url: 'https://github.com/IreshEranga/lood-circle-backend.git'
        //         }
        //         bat 'dir' // Debug: List files in the workspace
        //     }
        // }
        stage('SCM Checkout') {
    steps {
        retry(3) {
            checkout scmGit(
                branches: [[name: '*/main']],
                extensions: [],
                userRemoteConfigs: [[
                    credentialsId: 'github_token_new',
                    url: 'https://github.com/IreshEranga/lood-circle-backend.git'
                ]]
            )
        }
        bat 'dir' // Debug: List files in the workspace
    }
}

        stage('Check Docker Daemon') { // Added to verify Docker connectivity
            steps {
                script {
                    bat 'docker info || exit 1'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('api-gateway') { // Change to api-gateway directory
                    bat "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'test-dockerhubpassword', variable: 'test-dockerhubpass')]) {
                    script {
                        bat "docker login -u it22296696 -p %test-dockerhubpass%" // Updated to lowercase username
                    }
                }
            }
        }
        stage('Push Image') {
            steps {
                bat "docker push ${IMAGE_NAME}:${BUILD_NUMBER}"
            }
        }
        stage('Deploy') {
            steps {
                script {
                    bat "docker pull ${IMAGE_NAME}:${BUILD_NUMBER}"
                    bat "docker stop nodeapp-cuban || exit 0"
                    bat "docker rm nodeapp-cuban || exit 0"
                    bat "docker run -d --name nodeapp-cuban -p 3000:3000 ${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
    }
    post {
        always {
            bat 'docker logout'
            cleanWs()
        }
        success {
            script {
                echo 'Build and deployment successful!'
            }
        }
        failure {
            script {
                echo 'Build or deployment failed!'
            }
        }
    }
}
